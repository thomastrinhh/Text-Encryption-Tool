#include <iostream>
#include <string>
#include <bits/stdc++.h>
using namespace std;

/*
TODO: 
- Finish encryption algorithms vigenereAlgorithm() and playfairAlgorithm

SIDE-TASKS (not necessary but would improve our code):
- Account for user errors i.e. entering numbers for encrypted message, a letter for key, etc.
- Create loop that will allow user to continue running program after encryption is finished
*/

class Encrypt {
    // Message to be encrypted will be a private member of class Encrypt
    private:
    string originalMessage;
    int i, caesarKey;
    string vigenereKey, playfairKey;
    
    public:
    string encryptedMessage;
    bool translate; 



    void caesarAlgorithm() {
        cout << "Enter key: "; cin >> caesarKey;
        
        // Encryption
        if (!translate) {
        for(i=0; i < originalMessage.size(); i++) {
            encryptedMessage += (originalMessage[i]-'A'+ caesarKey) % 26 + 'A';
            }
        cout << "Encrypted text: ";
        }
        
        // Decryption
        if (translate) {
        for(i=0; i<originalMessage.size(); i++){
            encryptedMessage += (originalMessage[i]-'A'-caesarKey + 26) %26 + 'A';
            }
        cout << "Decrypted text: ";
        }
    }
    
    
    
    
    
    void vigenereAlgorithm() {
        cout << "Enter a word for the key:\n"; cin >> vigenereKey;
        //Encryption
        if (!translate){
            // Make sure key is at least as long as originalMessage
            while (vigenereKey.length() < originalMessage.length())
            {
                vigenereKey += vigenereKey;
            }
            // Encrypt the originalMessage using the key
            string encryptedMessage = "";
            for (int i = 0; i < originalMessage.length(); i++)
            {
                char c = originalMessage[i];
                char k = vigenereKey[i];
                char enc = ((c - 'A') + (k - 'A')) % 26 + 'A';
             encryptedMessage += enc;
            }
            cout << "Encrypted text: "; //<<encryptedMessage;
        }
        
        //Decryption
        if (translate){
            while (vigenereKey.length() < encryptedMessage.length())
            {
                vigenereKey += vigenereKey;
            }
            // Decrypt the encryptedMessage using the key
            string decryptedMessage = "";
            for (int i = 0; i < encryptedMessage.length(); i++)
            {
                char c = encryptedMessage[i];
                char k = vigenereKey[i];
                char dec = ((c - 'A') - (k - 'A') + 26) % 26 + 'A';
                decryptedMessage += dec;
            }
                cout << "Decrypted text: "<<endl;
            }
            
    }
    
    
    void playfairAlgorithm() {

    // Step 1: Define the key and the input message
    cout << "Enter key: "; cin >> playfairKey;

    // Step 2: Build the 5x5 matrix from the key
    char matrix[5][5];
    bool used[26] = {false};
    int k = 0, x = 0, y = 0;
    for (int i = 0; i < playfairKey.length(); i++) {
        char c = playfairKey[i];
        if (!used[c-'A']) {
            matrix[x][y] = c;
            used[c-'A'] = true;
            y++;
            if (y == 5) {
                x++;
                y = 0;
            }
        }
    }
    for (char c = 'A'; c <= 'Z'; c++) {
        if (c == 'J') continue;
        if (!used[c-'A']) {
            matrix[x][y] = c;
            used[c-'A'] = true;
            y++;
            if (y == 5) {
                x++;
                y = 0;
            }
        }
    }

    // Step 3: Remove spaces and duplicate letters from the input message
    string plainText = "";
    for (int i = 0; i < originalMessage.length(); i++) {
        char c = originalMessage[i];
        if (c == ' ') continue;
        if (c == 'J') c = 'I';
        if (i+1 < originalMessage.length() && originalMessage[i+1] == c) {
            plainText += c;
            plainText += 'X';
            continue;
        }
        plainText += c;
    }
    if (plainText.length() % 2 == 1) {
        plainText += 'X';
    }

    // Step 4: Apply the Playfair cipher
    string encryptedMessage = "";
    for (int i = 0; i < plainText.length(); i += 2) {
        char a = plainText[i];
        char b = plainText[i+1];
        int ax, ay, bx, by;
        for (int x = 0; x < 5; x++) {
            for (int y = 0; y < 5; y++) {
                if (matrix[x][y] == a) {
                    ax = x;
                    ay = y;
                }
                if (matrix[x][y] == b) {
                    bx = x;
                    by = y;
                }
            }
        }
        if (ax == bx) {
            ay = (ay + 1) % 5;
            by = (by + 1) % 5;
        } else if (ay == by) {
            ax = (ax + 1) % 5;
            bx = (bx + 1) % 5;
        } else {
            swap(ay, by);
        }
        encryptedMessage += matrix[ax][ay];
        encryptedMessage += matrix[bx][by];
    }

    cout << "Encrypted message: ";
    }
    


    
    
    
    // Friend class declaration to allow class Text to access private members of class Encrypt
    friend class Text;
    
};

// Inheritance
// Setter function
class Text: private Encrypt {
    
    public:
    int userChoice;
    int userChoice1;
    
    // Get text to be encrypted or decrypted from user
    void setText() {
        cout << "Enter the message you would like to be encrypted: ";
        getline(cin, originalMessage);
        // convert string to all uppercase
        transform(originalMessage.begin(), originalMessage.end(), originalMessage.begin(), ::toupper);
        cout << "Text entered was: " << originalMessage << "\n\n";
    }
    
    
    
    void setTranslate() {
        // Get from user if they want to encrypt or decrypt
        cout << "1. Encrypt" << endl << "2. Decrypt" << endl;
        cout << "Would you like to encrypt or decrypt? (1/2): ";
        cin >> userChoice;
        switch(userChoice) {
            case 1: translate = 0; break; // translate = 0 = encrypt
            case 2: translate = 1; break; // translate = 1 = decrypt
            default: cout << "Invalid input." << endl; break;
            }
    }
        
        
    void setChoice() {
        // Get from user which type of encryption method
        cout << "\n" << "1. Caesar Cipher Encryption" << endl << "2. Vigenere Cipher Encryption" << endl << "3. Playfair Cipher Encryption" << endl;
        cout << "Enter which encryption method you would like to use (1/2/3): ";
        cin >> userChoice1; cout << "\n";
        switch(userChoice1) {
            case 1: caesarAlgorithm(); break;
            case 2: vigenereAlgorithm(); break;
            case 3: playfairAlgorithm(); break;
            default: cout << "Invalid input." << endl; break;
        }
        
    }
    
    void printText() {
        cout << encryptedMessage << endl;
    }
    
};

// Driver function
int main() {
    
    Text encryptor;
    encryptor.setText();
    encryptor.setTranslate();
    encryptor.setChoice();
    encryptor.printText();
}
